/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    hold-while-undecided;
    hold-trigger-on-release;
};

&mt { tapping-term-ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        Caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <25 26 33 34>;
        };

        lshft {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <25 26>;
        };

        rshft {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <33 34>;
        };
    };

    behaviors {
        auto_shift: as {
            compatible = "zmk,behavior-hold-tap";
            label = "as";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&auto_shift LS(GRAVE) GRAVE  &auto_shift LS(Q) Q  &auto_shift LS(W) W  &auto_shift LS(E) E  &auto_shift LS(R) R  &auto_shift LS(T) T    &auto_shift LS(Y) Y  &auto_shift LS(U) U  &auto_shift LS(I) I          &auto_shift LS(O) O      &auto_shift LS(P) P          &kp DELETE
&kp TAB                      &auto_shift LS(A) A  &auto_shift LS(S) S  &auto_shift LS(D) D  &auto_shift LS(F) F  &auto_shift LS(G) G    &auto_shift LS(H) H  &auto_shift LS(J) J  &auto_shift LS(K) K          &auto_shift LS(L) L      &auto_shift LS(SEMI) SEMI    &auto_shift LS(SQT) SQT
&kp LCTRL                    &auto_shift LS(Z) Z  &auto_shift LS(X) X  &auto_shift LS(C) C  &auto_shift LS(V) V  &auto_shift LS(B) B    &auto_shift LS(N) N  &auto_shift LS(M) M  &auto_shift LS(COMMA) COMMA  &auto_shift LS(DOT) DOT  &auto_shift LS(SLASH) SLASH  &kp RIGHT_ALT
                                                                       &mt LEFT_GUI ESC     &lt 1 UNDER          &kp SPACE              &kp RETURN           &lt 2 BACKSPACE      &kp DELETE
            >;

            label = "Base";
        };

        NumSym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "NumSym";
            bindings = <
&trans  &kp LS(N1)     &kp LS(N2)               &kp LS(N3)  &kp LS(N4)                           &kp LS(N9)                                   &kp LS(N0)                                   &kp N7        &kp N8        &kp N9        &none                    &trans
&trans  &kp LS(N5)     &kp LS(NUMBER_6)         &kp LS(N7)  &auto_shift LS(BACKSLASH) BACKSLASH  &auto_shift LS(LEFT_BRACKET) LEFT_BRACKET    &auto_shift LS(RIGHT_BRACKET) RIGHT_BRACKET  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &auto_shift LS(SQT) SQT  &trans
&trans  &kp LS(EQUAL)  &auto_shift UNDER MINUS  &kp LS(N8)  &kp SLASH                            &none                                        &kp EQUAL                                    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none                    &trans
                                                &trans      &trans                               &trans                                       &mo 4                                        &kp N0        &none
            >;
        };

        Nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Navigation";
            bindings = <
&none  &none  &none  &none  &none  &none      &none               &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN  &none          &none
&none  &none  &none  &none  &none  &none      &kp LG(LEFT_ARROW)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &kp LG(RIGHT)  &none
&none  &none  &none  &none  &none  &none      &none               &none           &none           &none          &none          &none
                     &none  &mo 3  &kp TAB    &none               &none           &none
            >;

            label = "Nav";
        };

        Mouse {
            bindings = <
&none  &none  &none           &msc SCRL_UP    &none            &none    &none  &none           &mmv MOVE_UP    &none            &none  &none
&none  &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &none    &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &none
&none  &none  &mkp RCLK       &mkp MCLK       &mkp LCLK        &none    &none  &none           &none           &none            &none  &none
                              &none           &none            &none    &none  &none           &none
            >;

            label = "Mouse";
        };

        Function {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &kp CAPS                    &kp C_BRIGHTNESS_INC  &kp C_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &bt BT_NXT  &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none                       &kp C_BRIGHTNESS_DEC  &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT       &bt BT_PRV  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &kp LG(LC(LS(NUMBER_4)))    &none                 &none           &none              &none            &bt BT_CLR  &none
                        &none    &none    &none                       &none                 &none           &none
            >;

            label = "Func";
        };

        Base_AS {
            bindings = <
&kp GRAVE  &kp Q  &kp W  &kp E            &kp R        &kp T        &kp Y    &kp U            &kp I         &kp O    &kp P     &trans
&kp TAB    &kp A  &kp S  &kp D            &kp F        &kp G        &kp H    &kp J            &kp K         &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C            &kp V        &kp B        &kp N    &kp M            &kp COMMA     &kp DOT  &kp FSLH  &kp RALT
                         &mt LGUI ESCAPE  &lt 1 UNDER  &kp SPACE    &kp RET  &lt 2 BACKSPACE  &lt 4 DELETE
            >;

            label = "base_as";
        };
    };
};
