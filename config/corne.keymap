/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    hold-while-undecided;
    hold-trigger-on-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        Caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <24 35>;
        };

        Capword {
            bindings = <&caps_word>;
            key-positions = <37 40>;
        };
    };

    behaviors {
        auto_shift: as {
            compatible = "zmk,behavior-hold-tap";
            label = "as";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
        };

        mt_tap: mt_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mt_hold_while_undecided: mt_hold_while_undecided {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD_WHILE_UNDECIDED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
            hold-trigger-on-release;
        };

        lt_tap: lt_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        os: oneshot {
            compatible = "zmk,behavior-sticky-key";
            label = "ONESHOT";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        lo: layer_oneshot {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer Oneshot";
            bindings = <&mo>, <&os>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-while-undecided;
        };

        scl: shift_caps_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_LAYER";
            #binding-cells = <0>;
            bindings = <&lo 1 LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E                              &kp R             &kp T                       &kp Y                      &kp U            &kp I                        &kp O                          &kp P                       &kp DELETE
&kp LCTRL       &kp A  &kp S  &kp D                              &kp F             &kp G                       &kp H                      &kp J            &kp K                        &kp L                          &auto_shift SEMI APOS       &kp APOS
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C                              &kp V             &kp B                       &kp N                      &kp M            &auto_shift RS(COMMA) COMMA  &auto_shift RS(PERIOD) PERIOD  &auto_shift RS(FSLH) SLASH  &kp RIGHT_SHIFT
                              &mt_hold_while_undecided LGUI ESC  &lo 1 LEFT_SHIFT  &mt_tap SPACE LEFT_SHIFT    &mt_tap ENTER RIGHT_SHIFT  &lt 2 BACKSPACE  &lt_tap 4 DELETE
            >;

            label = "Base";
        };

        NumSym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "NumSym";
            bindings = <
&trans  &kp LS(N1)  &kp LS(N2)        &kp LS(N3)                                 &kp LS(N4)                                         &auto_shift LS(GRAVE) GRAVE    &kp ASTERISK  &kp N7        &kp N8        &kp N9        &auto_shift LS(MINUS) MINUS  &trans
&trans  &kp LS(N5)  &kp LS(NUMBER_6)  &kp LS(N7)                                 &auto_shift LS(NON_US_BACKSLASH) NON_US_BACKSLASH  &trans                         &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS                     &trans
&trans  &kp LS(N9)  &kp RS(N0)        &auto_shift LS(LEFT_BRACKET) LEFT_BRACKET  &auto_shift RS(RIGHT_BRACKET) RIGHT_BRACKET        &trans                         &kp COMMA     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL                    &trans
                                      &trans                                     &trans                                             &trans                         &trans        &kp N0        &kp PERIOD
            >;
        };

        Nav {
            bindings = <
&trans  &kp GRAVE  &trans  &trans  &trans  &trans    &trans        &trans    &kp UP    &trans     &trans         &trans
&trans  &trans     &trans  &trans  &trans  &trans    &kp LG(LEFT)  &kp LEFT  &kp DOWN  &kp RIGHT  &kp LG(RIGHT)  &trans
&trans  &trans     &trans  &trans  &trans  &trans    &trans        &trans    &trans    &trans     &trans         &trans
                           &trans  &trans  &trans    &trans        &trans    &trans
            >;

            label = "Nav";
        };

        Mouse {
            bindings = <
&none  &none  &none           &msc SCRL_UP    &none            &none    &none  &none           &mmv MOVE_UP    &none            &none  &none
&none  &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &none    &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &none
&none  &none  &mkp RCLK       &mkp MCLK       &mkp LCLK        &none    &none  &none           &none           &none            &none  &none
                              &none           &none            &none    &none  &none           &none
            >;

            label = "Mouse";
        };

        Function {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none                 &kp C_BRIGHTNESS_INC  &kp C_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none  &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &kp LC(LA(DELETE))    &kp C_BRIGHTNESS_DEC  &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT       &none  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &kp PRINTSCREEN       &none                 &none           &none              &none            &none  &none
                        &mo 5    &none    &none                 &none                 &none           &none
            >;

            label = "Func";
        };

        Bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans      &trans  &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_PRV  &bt BT_NXT  &trans  &bt BT_CLR  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans      &trans  &trans      &trans
                        &trans  &trans  &trans    &trans  &trans      &trans
            >;

            label = "bluetooth";
        };
    };
};
