/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    hold-while-undecided;
    hold-trigger-on-release;
};

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    hold-while-undecided;
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        Caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <2 3 4>;
        };
    };

    behaviors {
        mt2: mt2 {
            compatible = "zmk,behavior-hold-tap";
            label = "mod_tap2";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-while-undecided;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E            &kp R        &kp T        &kp Y         &kp U            &kp I            &kp O    &kp P     &kp BACKSPACE
&kp TAB     &kp A  &kp S  &kp D            &kp F        &kp G        &kp H         &kp J            &kp K            &kp L    &kp SEMI  &trans
&kp LCTRL   &kp Z  &kp X  &kp C            &kp V        &kp B        &kp N         &kp M            &kp COMMA        &kp DOT  &kp FSLH  &kp RIGHT_ALT
                          &mt LGUI ESCAPE  &lt 1 UNDER  &kp SPACE    &lt 4 RETURN  &lt 2 BACKSPACE  &mt RALT DELETE
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Symbols";
            bindings = <
&trans  &kp LS(N1)  &kp LS(N2)        &kp LS(N3)    &kp LS(N4)  &kp LS(NUMBER_9)        &kp LS(N0)             &kp N7        &kp N8        &kp N9        &kp GRAVE       &trans
&trans  &kp LS(N5)  &kp LS(NUMBER_6)  &kp LS(N7)    &kp PIPE    &kp LS(LEFT_BRACKET)    &kp LS(RIGHT_BRACKET)  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp APOSTROPHE  &trans
&trans  &kp PLUS    &kp MINUS         &kp ASTERISK  &kp SLASH   &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH   &trans
                                      &trans        &trans      &trans                  &kp EQUAL              &kp N0        &kp PERIOD
            >;
        };

        Navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Navigation";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans     &trans  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &trans
&trans  &trans  &trans  &trans  &trans  &trans     &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT        &trans
&trans  &trans  &trans  &trans  &trans  &trans     &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
                        &trans  &mo 3   &kp TAB    &trans  &trans          &trans
            >;

            label = "Navigation";
        };

        mouse {
            bindings = <
&trans  &trans  &trans          &msc SCRL_UP    &trans           &trans    &trans  &trans          &mmv MOVE_UP    &trans           &trans  &trans
&trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &mkp RCLK       &mkp MCLK       &mkp LCLK        &trans    &trans  &mkp LCLK       &mkp MCLK       &mkp RCLK        &trans  &trans
                                &trans          &trans           &trans    &trans  &trans          &trans
            >;

            label = "Mouse";
        };

        function {
            bindings = <
&trans      &kp F1   &kp F2   &kp F3  &kp F4              &kp F5                      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_MUTE  &kp C_VOL_DN      &kp C_VOLUME_UP  &trans
&bt BT_NXT  &kp F6   &kp F7   &kp F8  &kp F9              &kp F10                     &bl BL_DEC            &bl BL_INC            &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT       &trans
&bt BT_PRV  &kp F11  &kp F12  &trans  &kp LC(LA(DELETE))  &kp LG(LC(LS(NUMBER_4)))    &trans                &trans                &trans      &trans            &bt BT_CLR       &trans
                              &trans  &trans              &trans                      &trans                &trans                &trans
            >;

            label = "Function";
        };
    };
};
